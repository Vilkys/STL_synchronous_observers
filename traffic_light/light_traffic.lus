----------------------------------------------------------------------
-- This is an implementation of a simple traffic light system with one
-- (bi-directional) car lane and one pedestrian crossing.
--
--                            ooo
--       ------------------==-------------------
--                         ==
--                         ==
--       ------------------==-------------------
--                    ooo
--
-- Using the Kind 2 Interpreter, try to find problems in the
-- implementation.
----------------------------------------------------------------------

node TrafficLight( Button: bool )
returns ( Red, Yellow, Green, Walk, DontWalk: bool );

var Phase, prePhase: int;
let
  prePhase = 0 -> pre Phase;
  Phase    = if Button then
               1
             else if 0 < prePhase and prePhase < 10 then
               prePhase + 1
             else
               0;

  Green    = Phase = 0;
  Yellow   = Phase = 1;
  Red      = Phase > 1;

  Walk     = Phase > 2 and Phase < 10;
  DontWalk = not Walk;
tel


-- If the traffic light is orange, there is a green 
-- pedestrian light AND a red car light in the three times.

node testOrange(Button: bool) returns (test_result: bool);
  (*@contract
    var firstbutton: bool = Button -> pre firstbutton;
    assume firstbutton;
    guarantee test_result;
  *)
var red, yellow, green, walk, dontwalk: bool;
    phi: bool;
    -- phase: int;
    out_ev_true, out_ev_false: bool;
let
  red, yellow, green, walk, dontwalk = TrafficLight(Button);
  phi = walk and red;
  out_ev_true, out_ev_false = eventually_3v(1,3,phi);
  test_result = not out_ev_false;
tel





-------------------------------------------------------------
--                                                         --
--                    EVENTUALLY NODES                     -- 
--                                                         --
-------------------------------------------------------------

----------------------------------------------------------------------
--                          Useful nodes                            --
----------------------------------------------------------------------

node min (a,b: int) returns (valeur_min: int);
let
    valeur_min =
        if a <= b then a
        else b;
tel


node exist (inside_time_interval: bool ; prop: bool) returns (output: bool);
let
    output = (inside_time_interval and prop) or (false -> pre output);
tel

node forall_a (inside_time_interval: bool ; prop: bool) returns (output: bool);
let 
    output = not(exist(inside_time_interval, not prop));
tel


----------------------------------------------------------------------
--          Time node: we are in the [a,b] interval                 --
----------------------------------------------------------------------

-- Specification node with explicit clock as an argument 

node timeab_exp (const a,b: int; clk: int) returns (isin: bool);
(*@contract
    assume a>=0;                -- valid interval 
    -- assume true -> pre clk = clk -1; -- some hypothesis on clocks
*)
let
    isin = clk >= a and clk <= b;
tel

-- Implementation node exposing all internal flows to specifying them

node timeab_tmp (const a,b: int) returns (internal_clk: int;
     		       	    	 	  inside_time_interval: bool);
(*@contract
	var clk : int = 0 -> 1 + pre clk;
	assume a>=0;
	-- guarantee internal_clk <= b;
	guarantee (clk <= b) => internal_clk = clk;
	-- guarantee time = timeab_exp(a,b, clk);
*)
let
    internal_clk = min((0 -> 1 + pre internal_clk), b);
    inside_time_interval = (internal_clk >= a) and not ((-1 -> pre internal_clk) = b);
tel

-- Final Implementation node hiding internal flows

node timeab (const a,b: int) returns (inside_time_interval: bool);
(*@contract
	var clk : int = 0 -> 1 + pre clk;
	assume a>=0;
	guarantee inside_time_interval = timeab_exp(a,b, clk);
*)
var iclk: int; 
let
   iclk, inside_time_interval = timeab_tmp(a,b);
tel

----------------------------------------------------------------------
--                            Eventually                            --
----------------------------------------------------------------------

-- Eventually True:
-- true when we are sure that property is satisfied
node eventually_true (const a,b: int ; phi: bool)
             returns (output_ev_true: bool);
let
   output_ev_true = exist (timeab (a, b), phi);
tel


-- Eventually False: 
-- true when we are sure that property is not satisfied

node eventually_false (const a,b: int ; phi: bool) 
returns (output_ev_false: bool);
var ev_time: int;
let
    ev_time = min(0 -> pre ev_time + 1, b);

    output_ev_false = (ev_time = b) and 
    (forall_a (timeab (a,b), not phi));
tel

--------------------- Eventually three-valued  -----------------------

node eventually_3v(const a,b:int; phi: bool)
  returns (output_ev_true, output_ev_false: bool);
var was_valid: bool;
    ev_time:int;
let
  ev_time = min(0 -> pre ev_time + 1, b);
  was_valid = exist(timeab(a,b), phi);
  output_ev_true = was_valid;
  output_ev_false = ev_time = b and not was_valid;
tel

